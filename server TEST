{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMM5+CCA6uGJJHt/U9XFsOq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":160},"id":"c2-hQc6BHL_C","executionInfo":{"status":"ok","timestamp":1747594029158,"user_tz":-300,"elapsed":29328,"user":{"displayName":"Meruyert Amangeldi","userId":"06690990573028039692"}},"outputId":"8d3a37ac-5b9e-4dad-a101-bc3d22016b43"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/95.2 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.2/95.2 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/62.5 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/72.0 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-259a4b4d-946c-45fe-9ee9-06a20e03a5ed\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-259a4b4d-946c-45fe-9ee9-06a20e03a5ed\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving kaggle.json to kaggle.json\n","Dataset URL: https://www.kaggle.com/datasets/chethuhn/network-intrusion-dataset\n","License(s): CC0-1.0\n"]}],"source":["!pip install -q fastapi uvicorn nest_asyncio requests pyngrok joblib kaggle\n","import nest_asyncio\n","import threading\n","import joblib\n","import pandas as pd\n","import numpy as np\n","import hashlib\n","import time\n","from sklearn.preprocessing import StandardScaler\n","import uvicorn\n","from fastapi import FastAPI\n","from pydantic import BaseModel\n","from typing import List, Dict\n","from pyngrok import ngrok\n","\n","#Применяем патч для колла\n","nest_asyncio.apply()\n","\n","#Загружаем kaggle.json для доступа к API Kaggle\n","from google.colab import files\n","files.upload()\n","\n","#копируем  в папку ~/.kaggle\n","!mkdir -p ~/.kaggle\n","!cp kaggle.json ~/.kaggle/\n","!chmod 600 ~/.kaggle/kaggle.json\n","\n","#скачка и распаковк\n","!kaggle datasets download chethuhn/network-intrusion-dataset -q\n","!unzip -q network-intrusion-dataset.zip -d ./dataset"]},{"cell_type":"code","source":["csv_path = 'dataset/Friday-WorkingHours-Afternoon-DDos.pcap_ISCX.csv'\n","df = pd.read_csv(csv_path)\n","\n","#преобразуем имена столбцов к общему виду\n","df.columns = [c.strip().replace(' ', '_') for c in df.columns]\n","\n","#сохраняем истинные метки (BENIGN=0,'ddos'=1)\n","df['TrueLabel'] = np.where(df['Label'].str.lower().str.contains('ddos'), 1, 0)"],"metadata":{"id":"r942JbrTH4vH","executionInfo":{"status":"ok","timestamp":1747594039388,"user_tz":-300,"elapsed":5177,"user":{"displayName":"Meruyert Amangeldi","userId":"06690990573028039692"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["#Предобработка признаков\n","df.replace(['Infinity', np.inf, -np.inf], 0, inplace=True)\n","for col in ['Flow_Packets/s', 'Flow_Bytes/s']:\n","    if col in df.columns:\n","        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)\n","\n","if 'Timestamp' in df.columns:\n","    df['Timestamp'] = df['Timestamp'].fillna('1970-01-01 00:00:00')\n","    df['Timestamp'] = df['Timestamp'].apply(\n","        lambda x: int(hashlib.md5(x.encode()).hexdigest()[:8], 16)\n","    )\n","\n","drop_cols = [c for c in df.columns if c.lower().endswith(('ip','port','id'))]\n","df.drop(columns=drop_cols, errors='ignore', inplace=True)\n","\n","#Удаляем исходный столбец Label\n","df.drop(columns=['Label'], inplace=True)"],"metadata":{"id":"6l2fEZXLIEBa","executionInfo":{"status":"ok","timestamp":1747594113456,"user_tz":-300,"elapsed":406,"user":{"displayName":"Meruyert Amangeldi","userId":"06690990573028039692"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["#Собираем X и y, чистим NaN\n","y = df['TrueLabel'].values\n","X = df.drop(columns=['TrueLabel']).dropna()\n","y = y[X.index]\n","\n","print(f\"После предобработки: X.shape = {X.shape}, y.shape = {y.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cIu8Rn79IGmJ","executionInfo":{"status":"ok","timestamp":1747594123283,"user_tz":-300,"elapsed":206,"user":{"displayName":"Meruyert Amangeldi","userId":"06690990573028039692"}},"outputId":"b371e5fb-54bb-4ce5-d30b-18c364ad5a8d"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["После предобработки: X.shape = (225745, 77), y.shape = (225745,)\n"]}]},{"cell_type":"code","source":["#загружаем модель\n","model = joblib.load('best_svm_model.pkl')\n","print(f\"Модель ожидает {model.n_features_in_} признаков, в X — {X.shape[1]}\")\n","\n","if X.shape[1] != model.n_features_in_:\n","    X = X.iloc[:, :model.n_features_in_]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s3t-vVEoIHk_","executionInfo":{"status":"ok","timestamp":1747594556760,"user_tz":-300,"elapsed":64,"user":{"displayName":"Meruyert Amangeldi","userId":"06690990573028039692"}},"outputId":"487a7afe-ae0f-46a8-8265-e71838773335"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Модель ожидает 82 признаков, в X — 77\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","\n","scaler = MinMaxScaler(feature_range=(-1, 1))\n","X_scaled = scaler.fit_transform(X)"],"metadata":{"id":"a7TL_kMLIJvR","executionInfo":{"status":"ok","timestamp":1747594733475,"user_tz":-300,"elapsed":675,"user":{"displayName":"Meruyert Amangeldi","userId":"06690990573028039692"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import accuracy_score\n","import time\n","\n","# Найти индексы классов\n","ddos_indices = np.where(y == 1)[0]\n","normal_indices = np.where(y == 0)[0]\n","\n","# Выбрать по 50 примеров\n","chosen_ddos = ddos_indices[:50]\n","chosen_normal = normal_indices[:50]\n","selected_indices = np.concatenate([chosen_ddos, chosen_normal])\n","\n","# Перемешать, чтобы не шли подряд\n","np.random.shuffle(selected_indices)\n","\n","# Предсказания\n","preds = []\n","for i, idx in enumerate(selected_indices):\n","    pred = model.predict(X_scaled[idx].reshape(1, -1))[0]\n","    preds.append(pred)\n","    true = y[idx]\n","    icon_true = \"✅ NORMAL\" if true == 0 else \"⚠️ DDoS\"\n","    icon_pred = \"✅ NORMAL\" if pred == 0 else \"⚠️ DDoS\"\n","    print(f\"[{i+1:03d}] True: {icon_true}  →  Pred: {icon_pred}\")\n","    time.sleep(0.3)\n","\n","# Подсчёт точности\n","true_labels = y[selected_indices]\n","acc = accuracy_score(true_labels, preds)\n","print(f\"\\n🎯 Accuracy on 100 balanced samples: {acc * 100:.2f}%\")\n"],"metadata":{"id":"UT6EipoZIMD9","executionInfo":{"status":"ok","timestamp":1747594763563,"user_tz":-300,"elapsed":30090,"user":{"displayName":"Meruyert Amangeldi","userId":"06690990573028039692"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7765e15c-3703-41a2-9616-b041a4536632"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["[001] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[002] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[003] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[004] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[005] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[006] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[007] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[008] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[009] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[010] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[011] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[012] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[013] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[014] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[015] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[016] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[017] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[018] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[019] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[020] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[021] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[022] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[023] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[024] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[025] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[026] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[027] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[028] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[029] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[030] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[031] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[032] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[033] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[034] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[035] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[036] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[037] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[038] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[039] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[040] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[041] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[042] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[043] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[044] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[045] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[046] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[047] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[048] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[049] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[050] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[051] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[052] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[053] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[054] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[055] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[056] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[057] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[058] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[059] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[060] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[061] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[062] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[063] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[064] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[065] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[066] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[067] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[068] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[069] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[070] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[071] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[072] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[073] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[074] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[075] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[076] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[077] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[078] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[079] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[080] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[081] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[082] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[083] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[084] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[085] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[086] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[087] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[088] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[089] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[090] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[091] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[092] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[093] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[094] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[095] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[096] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[097] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","[098] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[099] True: ✅ NORMAL  →  Pred: ✅ NORMAL\n","[100] True: ⚠️ DDoS  →  Pred: ✅ NORMAL\n","\n","🎯 Accuracy on 100 balanced samples: 50.00%\n"]}]}]}